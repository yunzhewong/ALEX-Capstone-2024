close all

ITERATIONS = 0.02;
LOW = 0.6;
HIGH = 2.1;
current_commands = LOW:ITERATIONS:HIGH;

count = numel(current_commands);
steady_state_currents = zeros(1, count);
steady_state_velocities = zeros(1, count);

J_bs = zeros(1, count);

for i=1:count
    fullname = "./data/exo batch 2/step" + compose("%1.2f", current_commands(i)) + "A.csv";

    data = readmatrix(fullname);

    times = data(:, 1);
    corrected_times = times(:, 1) - times(1);
    currents = data(:, 2);
    velocities = data(:, 3);

    steady_state_index = floor(numel(times) / 2);

    steady_state_currents(i) = mean(currents(steady_state_index:end));
    steady_state_velocities(i) = mean(velocities(steady_state_index:end));

    finalTime = corrected_times(numel(corrected_times));
   
    outputAfterOneTau = (1 - exp(-1)) * steady_state_velocities(i);

    [~, tauIndex] = closest(velocities, outputAfterOneTau);

    J_bs(i) = corrected_times(tauIndex);
end

figure
plot(steady_state_currents, steady_state_velocities)

%v_ss_2 - v_ss_1 = Kt/b * (
Kt_bs = 
% Kt_bs = zeros(1, count - 1);
% for i = 1:count - 1
%     Kt_bs(i) = (K_bs(i + 1) - K_bs(i)) / ITERATIONS;
% end

% average_Kt_b = mean(Kt_bs);
% Fc_bs = K_bs - average_Kt_b * amperage;
% 
% average_Fc_b = mean(Fc_bs);
% average_J_b = mean(J_bs);
% 
% fprintf("Average Kt/b: %f\n", average_Kt_b)
% fprintf("Average Fc/b: %f\n", average_Fc_b)
% fprintf("Average J/b: %f\n", average_J_b)
% 
% Kt_bs
% Fc_bs
% J_bs
% 
% figure
% plot(amperage, K_bs)
% hold on
% 
% p = polyfit(amperage, K_bs, 2)
% 
% quadratic_fit = p(1) * (amperage .* amperage) + p(2) * amperage + p(3)
% plot(amperage, quadratic_fit)
% 
% figure
% plot(amperage(1:numel(amperage) - 1), Kt_bs)
% 
% figure
% plot(amperage, Fc_bs)
% 
% figure
% plot(amperage, J_bs)
% 
% %assumption
% K_t = 3.563;
% min_amperage = 0.48;
% 
% average_Kt_b
% b = K_t / average_Kt_b
% F_c = average_Fc_b * b
% F_stat = K_t * min_amperage
% J = average_J_b * b
function [match, index] = closest(values, searchValue) 
    [match, index] = min(abs(values - searchValue));
end

